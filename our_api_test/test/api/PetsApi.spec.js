/**
 * Swagger Petstore
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd() + '/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd() + '/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SwaggerPetstore);
  }
}(this, function (expect, SwaggerPetstore) {
  'use strict';

  var instance;

  beforeEach(function () {
    instance = new SwaggerPetstore.PetsApi();
  });

  var getProperty = function (object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function (object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }



  describe('PetsApi', function () {
    this.timeout(30000);
    describe('createPets', function () {
      let postBody = {
        "id": 0,
        "category": {
          "id": 0,
          "name": "Myanmar"
        },
        "name": "အင်းခွေး",
        "photoUrls": [
          "string"
        ],
        "tags": [
          {
            "id": 0,
            "name": "tag one"
          }
        ],
        "status": "available"
      };

      it('should call createPets successfully with '+ postBody.name, function (done) {

        // Make an API call to create a pet
        
        instance.createPets(({ error, data, response }) => {
          if (error) throw error;
  
          /*
          console.log("call back fired");
          console.log("error");
          console.log(error);
          console.log("data");
          console.log(data);
          console.log("response");
          console.log(response.text);
          */
  
          // Add assertions to check the response
          expect(response.statusCode).to.equal(200);  // Check the HTTP status code

          expect(JSON.parse(response.text).name).to.equal(postBody.name);
  
          done();  // Indicate that the test is complete
        }, postBody);

        /*
        instance.createPets(({ error, data, response }) => {
          console.log("call back fired");
          console.log("error");
          console.log(error);
          console.log("data");
          console.log(data);
          console.log("response");
          console.log(response.statusCode);
          // console.log(response);

          expect(response.statusCode).to.equal(200);  // Check the HTTP status code


        }, function (error, response) {
          if (error) throw error;

          console.log("response");
          console.log(response);

          // Add assertions to check the response
          expect(response.statusCode).to.equal(200);  // Check the HTTP status code
          expect(response.body).to.be.an('object');   // Check that the response is an object

          // You can add more specific assertions as needed based on the API response

          done();  // Indicate that the test is complete
        });
        */


        //uncomment below and update the code to test createPets
        //instance.createPets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        //done();
      });
    });
    describe('listPets', function () {
      it('should call listPets successfully', function (done) {
        let opts = {
          "status": "available"
        };

        instance.listPets(opts,({ error, data, response }) => {
          if (error) throw error;
          // Add assertions to check the response
          expect(response.statusCode).to.equal(200);  // Check the HTTP status code
          done();  // Indicate that the test is complete
        }, );
      });
    });
    describe('showPetById', function () {
      it('should call showPetById successfully', function (done) {
        let petId = "102";

        instance.showPetById(petId,({ error, data, response }) => {
          if (error) throw error;
          // Add assertions to check the response
          expect(response.statusCode).to.equal(200);  // Check the HTTP status code
          done();  // Indicate that the test is complete
        }, );

        //uncomment below and update the code to test showPetById
        //instance.showPetById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        // done();
      });
    });
  });

}));
